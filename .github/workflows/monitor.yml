name: Monitor Onion Services

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual triggers
  push:
    branches:
      - main
    paths:
      - 'onions.json'
      - 'src/**'
      - 'Dockerfile'
      - 'docker-compose.yml'

jobs:
  monitor:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Need write permission to commit results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create necessary directories
        run: |
          mkdir -p docs arti-data

      - name: Run monitoring with Docker Compose
        run: |
          docker compose up --build --abort-on-container-exit
        timeout-minutes: 30

      - name: Check generated files
        run: |
          echo "=== Generated files ==="
          ls -lh docs/
          ls -lh onions.json
          echo "=== HTML preview (first 50 lines) ==="
          head -50 docs/index.html || true

      - name: Commit and push results
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Add the updated files
          git add onions.json docs/index.html

          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸ¤– Update onion service status - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
          fi

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'ðŸ¤– Deploy monitoring results'

      - name: Cleanup Docker
        if: always()
        run: |
          docker compose down -v
          docker system prune -f
